{"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\webdriverio-test\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\webdriverio-test\",\"filename\":\"C:\\\\webdriverio-test\\\\wdio.conf.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\webdriverio-test\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"proposal-class-static-block\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ClassBody\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"proposal-private-property-in-object\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"BinaryExpression\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"syntax-class-properties\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"proposal-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.20.5:test":{"value":{"code":"\"use strict\";\n\nexports.config = {\n  //\n  // ====================\n  // Runner Configuration\n  // ====================\n  //\n  //\n  // ==================\n  // Specify Test Files\n  // ==================\n  // Define which test specs should run. The pattern is relative to the directory\n  // from which `wdio` was called.\n  //\n  // The specs are defined as an array of spec files (optionally using wildcards\n  // that will be expanded). The test for each spec file will be run in a separate\n  // worker process. In order to have a group of spec files run in the same worker\n  // process simply enclose them in an array within the specs array.\n  //\n  // If you are calling `wdio` from an NPM script (see https://docs.npmjs.com/cli/run-script),\n  // then the current working directory is where your `package.json` resides, so `wdio`\n  // will be called from there.\n  //\n  specs: ['./test/**/*.js'],\n  // Patterns to exclude.\n  exclude: [\n    // 'path/to/excluded/files'\n  ],\n  //\n  // ============\n  // Capabilities\n  // ============\n  // Define your capabilities here. WebdriverIO can run multiple capabilities at the same\n  // time. Depending on the number of capabilities, WebdriverIO launches several test\n  // sessions. Within your capabilities you can overwrite the spec and exclude options in\n  // order to group specific specs to a specific capability.\n  //\n  // First, you can define how many instances should be started at the same time. Let's\n  // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have\n  // set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec\n  // files and you set maxInstances to 10, all spec files will get tested at the same time\n  // and 30 processes will get spawned. The property handles how many capabilities\n  // from the same test should run tests.\n  //\n  maxInstances: 10,\n  //\n  // If you have trouble getting all important capabilities together, check out the\n  // Sauce Labs platform configurator - a great tool to configure your capabilities:\n  // https://saucelabs.com/platform/platform-configurator\n  //\n  capabilities: [{\n    // maxInstances can get overwritten per capability. So if you have an in-house Selenium\n    // grid with only 5 firefox instances available you can make sure that not more than\n    // 5 instances get started at a time.\n    maxInstances: 5,\n    //\n    browserName: 'chrome',\n    'goog:chromeOptions': {\n      args: ['--incognito', '--window-size=1440,810', '--disable-extensions']\n    },\n    acceptInsecureCerts: true\n    // If outputDir is provided WebdriverIO can capture driver session logs\n    // it is possible to configure which logTypes to include/exclude.\n    // excludeDriverLogs: ['*'], // pass '*' to exclude all driver session logs\n    // excludeDriverLogs: ['bugreport', 'server'],\n  }],\n\n  //\n  // ===================\n  // Test Configurations\n  // ===================\n  // Define all options that are relevant for the WebdriverIO instance here\n  //\n  // Level of logging verbosity: trace | debug | info | warn | error | silent\n  logLevel: 'info',\n  //\n  // Set specific log levels per logger\n  // loggers:\n  // - webdriver, webdriverio\n  // - @wdio/browserstack-service, @wdio/devtools-service, @wdio/sauce-service\n  // - @wdio/mocha-framework, @wdio/jasmine-framework\n  // - @wdio/local-runner\n  // - @wdio/sumologic-reporter\n  // - @wdio/cli, @wdio/config, @wdio/utils\n  // Level of logging verbosity: trace | debug | info | warn | error | silent\n  // logLevels: {\n  //     webdriver: 'info',\n  //     '@wdio/appium-service': 'info'\n  // },\n  //\n  // If you only want to run your tests until a specific amount of tests have failed use\n  // bail (default is 0 - don't bail, run all tests).\n  bail: 0,\n  //\n  // Set a base URL in order to shorten url command calls. If your `url` parameter starts\n  // with `/`, the base url gets prepended, not including the path portion of your baseUrl.\n  // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url\n  // gets prepended directly.\n  baseUrl: '',\n  //http://localhost\n  // Default timeout for all waitFor* commands.\n  waitforTimeout: 10000,\n  //\n  // Default timeout in milliseconds for request\n  // if browser driver or grid doesn't send response\n  connectionRetryTimeout: 120000,\n  //\n  // Default request retries count\n  connectionRetryCount: 3,\n  //\n  // Test runner services\n  // Services take over a specific job you don't want to take care of. They enhance\n  // your test setup with almost no effort. Unlike plugins, they don't add new\n  // commands. Instead, they hook themselves up into the test process.\n  services: ['chromedriver'],\n  // Framework you want to run your specs with.\n  // The following are supported: Mocha, Jasmine, and Cucumber\n  // see also: https://webdriver.io/docs/frameworks\n  //\n  // Make sure you have the wdio adapter package for the specific framework installed\n  // before running any tests.\n  framework: 'jasmine',\n  //\n  // The number of times to retry the entire specfile when it fails as a whole\n  // specFileRetries: 1,\n  //\n  // Delay in seconds between the spec file retry attempts\n  // specFileRetriesDelay: 0,\n  //\n  // Whether or not retried specfiles should be retried immediately or deferred to the end of the queue\n  // specFileRetriesDeferred: false,\n  //\n  // Test reporter for stdout.\n  // The only one supported by default is 'dot'\n  // see also: https://webdriver.io/docs/dot-reporter\n  reporters: [['allure', {\n    outputDir: 'allure-results',\n    disableWebdriverStepsReporting: true,\n    disableWebdriverScreenshotsReporting: true\n  }]],\n  port: 4444,\n  //\n  // Options to be passed to Mocha.\n  // See the full list at http://mochajs.org/\n\n  // mochaOpts: {\n  //     ui: 'bdd',\n  //     timeout: 60000,\n  //     require: ['@babel/register']\n  // },\n  jasmineOpts: {\n    // Jasmine default timeout\n    defaultTimeoutInterval: 300000,\n    showColors: true,\n    includeStackTrace: true,\n    isVerbose: true,\n    helpers: [require.resolve('@babel/register')]\n  },\n  //\n  // =====\n  // Hooks\n  // =====\n  // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance\n  // it and to build services around it. You can either apply a single function or an array of\n  // methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got\n  // resolved to continue.\n  /**\n   * Gets executed once before all workers get launched.\n   * @param {Object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   */\n  // onPrepare: function (config, capabilities) {\n  // },\n  /**\n   * Gets executed before a worker process is spawned and can be used to initialise specific service\n   * for that worker as well as modify runtime environments in an async fashion.\n   * @param  {String} cid      capability id (e.g 0-0)\n   * @param  {[type]} caps     object containing capabilities for session that will be spawn in the worker\n   * @param  {[type]} specs    specs to be run in the worker process\n   * @param  {[type]} args     object that will be merged with the main configuration once worker is initialized\n   * @param  {[type]} execArgv list of string arguments passed to the worker process\n   */\n  // onWorkerStart: function (cid, caps, specs, args, execArgv) {\n  // },\n  /**\n   * Gets executed just after a worker process has exited.\n   * @param  {String} cid      capability id (e.g 0-0)\n   * @param  {Number} exitCode 0 - success, 1 - fail\n   * @param  {[type]} specs    specs to be run in the worker process\n   * @param  {Number} retries  number of retries used\n   */\n  // onWorkerEnd: function (cid, exitCode, specs, retries) {\n  // },\n  /**\n   * Gets executed just before initialising the webdriver session and test framework. It allows you\n   * to manipulate configurations depending on the capability or spec.\n   * @param {Object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that are to be run\n   * @param {String} cid worker id (e.g. 0-0)\n   */\n  // beforeSession: function (config, capabilities, specs, cid) {\n  // },\n  /**\n   * Gets executed before test execution begins. At this point you can access to all global\n   * variables like `browser`. It is the perfect place to define custom commands.\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs        List of spec file paths that are to be run\n   * @param {Object}         browser      instance of created browser/device session\n   */\n  before: function () {\n    require('@babel/register');\n    browser.setTimeout({\n      implicit: 15000\n    });\n  },\n  /**\n   * Runs before a WebdriverIO command gets executed.\n   * @param {String} commandName hook command name\n   * @param {Array} args arguments that command would receive\n   */\n  // beforeCommand: function (commandName, args) {\n  // },\n  /**\n   * Hook that gets executed before the suite starts\n   * @param {Object} suite suite details\n   */\n  // beforeSuite: function (suite) {\n  // },\n  /**\n   * Function to be executed before a test (in Mocha/Jasmine) starts.\n   */\n  // beforeTest: function (test, context) {\n  //     // browser.minimizeWindow();\n  // },\n  /**\n   * Hook that gets executed _before_ a hook within the suite starts (e.g. runs before calling\n   * beforeEach in Mocha)\n   */\n  // beforeHook: function (test, context) {\n  // },\n  /**\n   * Hook that gets executed _after_ a hook within the suite starts (e.g. runs after calling\n   * afterEach in Mocha)\n   */\n  // afterHook: function (test, context, { error, result, duration, passed, retries }) {\n  // },\n  /**\n   * Function to be executed after a test (in Mocha/Jasmine only)\n   * @param {Object}  test             test object\n   * @param {Object}  context          scope object the test was executed with\n   * @param {Error}   result.error     error object in case the test fails, otherwise `undefined`\n   * @param {Any}     result.result    return object of test function\n   * @param {Number}  result.duration  duration of test\n   * @param {Boolean} result.passed    true if test has passed, otherwise false\n   * @param {Object}  result.retries   informations to spec related retries, e.g. `{ attempts: 0, limit: 0 }`\n   */\n\n  afterTest: function (test, context, {\n    error,\n    result,\n    duration,\n    passed,\n    retries\n  }) {\n    const path = \"C:/webdriverio-test/scrshot\";\n    if (error) {\n      browser.saveScreenshot(path);\n    }\n    // if (error) {\n    //     browser.takeScreenshot();\n    // }\n  }\n\n  /**\n   * Hook that gets executed after the suite has ended\n   * @param {Object} suite suite details\n   */\n  // afterSuite: function (suite) {\n  // },\n  /**\n   * Runs after a WebdriverIO command gets executed\n   * @param {String} commandName hook command name\n   * @param {Array} args arguments that command would receive\n   * @param {Number} result 0 - command success, 1 - command error\n   * @param {Object} error error object if any\n   */\n  // afterCommand: function (commandName, args, result, error) {\n  // },\n  /**\n   * Gets executed after all tests are done. You still have access to all global variables from\n   * the test.\n   * @param {Number} result 0 - test pass, 1 - test fail\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that ran\n   */\n  // after: function (result, capabilities, specs) {\n  // },\n  /**\n   * Gets executed right after terminating the webdriver session.\n   * @param {Object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that ran\n   */\n  // afterSession: function (config, capabilities, specs) {\n  // },\n  /**\n   * Gets executed after all workers got shut down and the process is about to exit. An error\n   * thrown in the onComplete hook will result in the test run failing.\n   * @param {Object} exitCode 0 - success, 1 - fail\n   * @param {Object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {<Object>} results object containing test results\n   */\n  // onComplete: function(exitCode, config, capabilities, results) {\n  // },\n  /**\n  * Gets executed when a refresh happens.\n  * @param {String} oldSessionId session ID of the old session\n  * @param {String} newSessionId session ID of the new session\n  */\n  // onReload: function(oldSessionId, newSessionId) {\n  // }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["exports","config","specs","exclude","maxInstances","capabilities","browserName","args","acceptInsecureCerts","logLevel","bail","baseUrl","waitforTimeout","connectionRetryTimeout","connectionRetryCount","services","framework","reporters","outputDir","disableWebdriverStepsReporting","disableWebdriverScreenshotsReporting","port","jasmineOpts","defaultTimeoutInterval","showColors","includeStackTrace","isVerbose","helpers","require","resolve","before","browser","setTimeout","implicit","afterTest","test","context","error","result","duration","passed","retries","path","saveScreenshot"],"sourceRoot":"C:\\webdriverio-test\\","sources":["wdio.conf.js"],"sourcesContent":["exports.config = {\n    //\n    // ====================\n    // Runner Configuration\n    // ====================\n    //\n    //\n    // ==================\n    // Specify Test Files\n    // ==================\n    // Define which test specs should run. The pattern is relative to the directory\n    // from which `wdio` was called.\n    //\n    // The specs are defined as an array of spec files (optionally using wildcards\n    // that will be expanded). The test for each spec file will be run in a separate\n    // worker process. In order to have a group of spec files run in the same worker\n    // process simply enclose them in an array within the specs array.\n    //\n    // If you are calling `wdio` from an NPM script (see https://docs.npmjs.com/cli/run-script),\n    // then the current working directory is where your `package.json` resides, so `wdio`\n    // will be called from there.\n    //\n    specs: [\n        './test/**/*.js'\n    ],\n    // Patterns to exclude.\n    exclude: [\n        // 'path/to/excluded/files'\n    ],\n    //\n    // ============\n    // Capabilities\n    // ============\n    // Define your capabilities here. WebdriverIO can run multiple capabilities at the same\n    // time. Depending on the number of capabilities, WebdriverIO launches several test\n    // sessions. Within your capabilities you can overwrite the spec and exclude options in\n    // order to group specific specs to a specific capability.\n    //\n    // First, you can define how many instances should be started at the same time. Let's\n    // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have\n    // set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec\n    // files and you set maxInstances to 10, all spec files will get tested at the same time\n    // and 30 processes will get spawned. The property handles how many capabilities\n    // from the same test should run tests.\n    //\n    maxInstances: 10,\n    //\n    // If you have trouble getting all important capabilities together, check out the\n    // Sauce Labs platform configurator - a great tool to configure your capabilities:\n    // https://saucelabs.com/platform/platform-configurator\n    //\n    capabilities: [{\n\n        // maxInstances can get overwritten per capability. So if you have an in-house Selenium\n        // grid with only 5 firefox instances available you can make sure that not more than\n        // 5 instances get started at a time.\n        maxInstances: 5,\n        //\n        browserName: 'chrome',\n        'goog:chromeOptions': {\n            args: ['--incognito', '--window-size=1440,810', '--disable-extensions'],\n\n        },\n        acceptInsecureCerts: true\n        // If outputDir is provided WebdriverIO can capture driver session logs\n        // it is possible to configure which logTypes to include/exclude.\n        // excludeDriverLogs: ['*'], // pass '*' to exclude all driver session logs\n        // excludeDriverLogs: ['bugreport', 'server'],\n    }],\n    //\n    // ===================\n    // Test Configurations\n    // ===================\n    // Define all options that are relevant for the WebdriverIO instance here\n    //\n    // Level of logging verbosity: trace | debug | info | warn | error | silent\n    logLevel: 'info',\n    //\n    // Set specific log levels per logger\n    // loggers:\n    // - webdriver, webdriverio\n    // - @wdio/browserstack-service, @wdio/devtools-service, @wdio/sauce-service\n    // - @wdio/mocha-framework, @wdio/jasmine-framework\n    // - @wdio/local-runner\n    // - @wdio/sumologic-reporter\n    // - @wdio/cli, @wdio/config, @wdio/utils\n    // Level of logging verbosity: trace | debug | info | warn | error | silent\n    // logLevels: {\n    //     webdriver: 'info',\n    //     '@wdio/appium-service': 'info'\n    // },\n    //\n    // If you only want to run your tests until a specific amount of tests have failed use\n    // bail (default is 0 - don't bail, run all tests).\n    bail: 0,\n    //\n    // Set a base URL in order to shorten url command calls. If your `url` parameter starts\n    // with `/`, the base url gets prepended, not including the path portion of your baseUrl.\n    // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url\n    // gets prepended directly.\n    baseUrl: '',\n    //http://localhost\n    // Default timeout for all waitFor* commands.\n    waitforTimeout: 10000,\n    //\n    // Default timeout in milliseconds for request\n    // if browser driver or grid doesn't send response\n    connectionRetryTimeout: 120000,\n    //\n    // Default request retries count\n    connectionRetryCount: 3,\n    //\n    // Test runner services\n    // Services take over a specific job you don't want to take care of. They enhance\n    // your test setup with almost no effort. Unlike plugins, they don't add new\n    // commands. Instead, they hook themselves up into the test process.\n    services: ['chromedriver'],\n\n    // Framework you want to run your specs with.\n    // The following are supported: Mocha, Jasmine, and Cucumber\n    // see also: https://webdriver.io/docs/frameworks\n    //\n    // Make sure you have the wdio adapter package for the specific framework installed\n    // before running any tests.\n    framework: 'jasmine',\n    //\n    // The number of times to retry the entire specfile when it fails as a whole\n    // specFileRetries: 1,\n    //\n    // Delay in seconds between the spec file retry attempts\n    // specFileRetriesDelay: 0,\n    //\n    // Whether or not retried specfiles should be retried immediately or deferred to the end of the queue\n    // specFileRetriesDeferred: false,\n    //\n    // Test reporter for stdout.\n    // The only one supported by default is 'dot'\n    // see also: https://webdriver.io/docs/dot-reporter\n    reporters: [['allure', {\n        outputDir: 'allure-results',\n        disableWebdriverStepsReporting: true,\n        disableWebdriverScreenshotsReporting: true,\n    }]],\n\n\n    port: 4444,\n    //\n    // Options to be passed to Mocha.\n    // See the full list at http://mochajs.org/\n\n    // mochaOpts: {\n    //     ui: 'bdd',\n    //     timeout: 60000,\n    //     require: ['@babel/register']\n    // },\n    jasmineOpts: { // Jasmine default timeout\n        defaultTimeoutInterval: 300000,\n        showColors: true,\n        includeStackTrace: true,\n        isVerbose: true,\n        helpers: [require.resolve('@babel/register')]\n\n    },\n\n    //\n    // =====\n    // Hooks\n    // =====\n    // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance\n    // it and to build services around it. You can either apply a single function or an array of\n    // methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got\n    // resolved to continue.\n    /**\n     * Gets executed once before all workers get launched.\n     * @param {Object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     */\n    // onPrepare: function (config, capabilities) {\n    // },\n    /**\n     * Gets executed before a worker process is spawned and can be used to initialise specific service\n     * for that worker as well as modify runtime environments in an async fashion.\n     * @param  {String} cid      capability id (e.g 0-0)\n     * @param  {[type]} caps     object containing capabilities for session that will be spawn in the worker\n     * @param  {[type]} specs    specs to be run in the worker process\n     * @param  {[type]} args     object that will be merged with the main configuration once worker is initialized\n     * @param  {[type]} execArgv list of string arguments passed to the worker process\n     */\n    // onWorkerStart: function (cid, caps, specs, args, execArgv) {\n    // },\n    /**\n     * Gets executed just after a worker process has exited.\n     * @param  {String} cid      capability id (e.g 0-0)\n     * @param  {Number} exitCode 0 - success, 1 - fail\n     * @param  {[type]} specs    specs to be run in the worker process\n     * @param  {Number} retries  number of retries used\n     */\n    // onWorkerEnd: function (cid, exitCode, specs, retries) {\n    // },\n    /**\n     * Gets executed just before initialising the webdriver session and test framework. It allows you\n     * to manipulate configurations depending on the capability or spec.\n     * @param {Object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs List of spec file paths that are to be run\n     * @param {String} cid worker id (e.g. 0-0)\n     */\n    // beforeSession: function (config, capabilities, specs, cid) {\n    // },\n    /**\n     * Gets executed before test execution begins. At this point you can access to all global\n     * variables like `browser`. It is the perfect place to define custom commands.\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs        List of spec file paths that are to be run\n     * @param {Object}         browser      instance of created browser/device session\n     */\n    before: function () {\n        require('@babel/register');\n        browser.setTimeout({ implicit: 15000 });\n    },\n\n    /**\n     * Runs before a WebdriverIO command gets executed.\n     * @param {String} commandName hook command name\n     * @param {Array} args arguments that command would receive\n     */\n    // beforeCommand: function (commandName, args) {\n    // },\n    /**\n     * Hook that gets executed before the suite starts\n     * @param {Object} suite suite details\n     */\n    // beforeSuite: function (suite) {\n    // },\n    /**\n     * Function to be executed before a test (in Mocha/Jasmine) starts.\n     */\n    // beforeTest: function (test, context) {\n    //     // browser.minimizeWindow();\n    // },\n    /**\n     * Hook that gets executed _before_ a hook within the suite starts (e.g. runs before calling\n     * beforeEach in Mocha)\n     */\n    // beforeHook: function (test, context) {\n    // },\n    /**\n     * Hook that gets executed _after_ a hook within the suite starts (e.g. runs after calling\n     * afterEach in Mocha)\n     */\n    // afterHook: function (test, context, { error, result, duration, passed, retries }) {\n    // },\n    /**\n     * Function to be executed after a test (in Mocha/Jasmine only)\n     * @param {Object}  test             test object\n     * @param {Object}  context          scope object the test was executed with\n     * @param {Error}   result.error     error object in case the test fails, otherwise `undefined`\n     * @param {Any}     result.result    return object of test function\n     * @param {Number}  result.duration  duration of test\n     * @param {Boolean} result.passed    true if test has passed, otherwise false\n     * @param {Object}  result.retries   informations to spec related retries, e.g. `{ attempts: 0, limit: 0 }`\n     */\n\n    afterTest: function (test, context, { error, result, duration, passed, retries }) {\n        const path = \"C:/webdriverio-test/scrshot\";\n        if (error) {\n            browser.saveScreenshot(path);\n        }\n        // if (error) {\n        //     browser.takeScreenshot();\n        // }\n    },\n\n\n    /**\n     * Hook that gets executed after the suite has ended\n     * @param {Object} suite suite details\n     */\n    // afterSuite: function (suite) {\n    // },\n    /**\n     * Runs after a WebdriverIO command gets executed\n     * @param {String} commandName hook command name\n     * @param {Array} args arguments that command would receive\n     * @param {Number} result 0 - command success, 1 - command error\n     * @param {Object} error error object if any\n     */\n    // afterCommand: function (commandName, args, result, error) {\n    // },\n    /**\n     * Gets executed after all tests are done. You still have access to all global variables from\n     * the test.\n     * @param {Number} result 0 - test pass, 1 - test fail\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs List of spec file paths that ran\n     */\n    // after: function (result, capabilities, specs) {\n    // },\n    /**\n     * Gets executed right after terminating the webdriver session.\n     * @param {Object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs List of spec file paths that ran\n     */\n    // afterSession: function (config, capabilities, specs) {\n    // },\n    /**\n     * Gets executed after all workers got shut down and the process is about to exit. An error\n     * thrown in the onComplete hook will result in the test run failing.\n     * @param {Object} exitCode 0 - success, 1 - fail\n     * @param {Object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {<Object>} results object containing test results\n     */\n    // onComplete: function(exitCode, config, capabilities, results) {\n    // },\n    /**\n    * Gets executed when a refresh happens.\n    * @param {String} oldSessionId session ID of the old session\n    * @param {String} newSessionId session ID of the new session\n    */\n    // onReload: function(oldSessionId, newSessionId) {\n    // }\n}\n"],"mappings":";;AAAAA,OAAO,CAACC,MAAM,GAAG;EACb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,KAAK,EAAE,CACH,gBAAgB,CACnB;EACD;EACAC,OAAO,EAAE;IACL;EAAA,CACH;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,YAAY,EAAE,EAAE;EAChB;EACA;EACA;EACA;EACA;EACAC,YAAY,EAAE,CAAC;IAEX;IACA;IACA;IACAD,YAAY,EAAE,CAAC;IACf;IACAE,WAAW,EAAE,QAAQ;IACrB,oBAAoB,EAAE;MAClBC,IAAI,EAAE,CAAC,aAAa,EAAE,wBAAwB,EAAE,sBAAsB;IAE1E,CAAC;IACDC,mBAAmB,EAAE;IACrB;IACA;IACA;IACA;EACJ,CAAC,CAAC;;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,QAAQ,EAAE,MAAM;EAChB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,IAAI,EAAE,CAAC;EACP;EACA;EACA;EACA;EACA;EACAC,OAAO,EAAE,EAAE;EACX;EACA;EACAC,cAAc,EAAE,KAAK;EACrB;EACA;EACA;EACAC,sBAAsB,EAAE,MAAM;EAC9B;EACA;EACAC,oBAAoB,EAAE,CAAC;EACvB;EACA;EACA;EACA;EACA;EACAC,QAAQ,EAAE,CAAC,cAAc,CAAC;EAE1B;EACA;EACA;EACA;EACA;EACA;EACAC,SAAS,EAAE,SAAS;EACpB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,SAAS,EAAE,CAAC,CAAC,QAAQ,EAAE;IACnBC,SAAS,EAAE,gBAAgB;IAC3BC,8BAA8B,EAAE,IAAI;IACpCC,oCAAoC,EAAE;EAC1C,CAAC,CAAC,CAAC;EAGHC,IAAI,EAAE,IAAI;EACV;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACAC,WAAW,EAAE;IAAE;IACXC,sBAAsB,EAAE,MAAM;IAC9BC,UAAU,EAAE,IAAI;IAChBC,iBAAiB,EAAE,IAAI;IACvBC,SAAS,EAAE,IAAI;IACfC,OAAO,EAAE,CAACC,OAAO,CAACC,OAAO,CAAC,iBAAiB,CAAC;EAEhD,CAAC;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,MAAM,EAAE,YAAY;IAChBF,OAAO,CAAC,iBAAiB,CAAC;IAC1BG,OAAO,CAACC,UAAU,CAAC;MAAEC,QAAQ,EAAE;IAAM,CAAC,CAAC;EAC3C,CAAC;EAED;AACJ;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;EACI;EACA;EACA;EACA;AACJ;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEIC,SAAS,EAAE,UAAUC,IAAI,EAAEC,OAAO,EAAE;IAAEC,KAAK;IAAEC,MAAM;IAAEC,QAAQ;IAAEC,MAAM;IAAEC;EAAQ,CAAC,EAAE;IAC9E,MAAMC,IAAI,GAAG,6BAA6B;IAC1C,IAAIL,KAAK,EAAE;MACPN,OAAO,CAACY,cAAc,CAACD,IAAI,CAAC;IAChC;IACA;IACA;IACA;EACJ;;EAGA;AACJ;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;EACI;EACA;AACJ,CAAC"}},"mtime":1670234374346}}